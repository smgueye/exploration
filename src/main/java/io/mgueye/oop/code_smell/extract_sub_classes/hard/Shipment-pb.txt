package hardcase;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Objects;

public class Shipment {

    private final String id;
    private final String originCountry;
    private final String destinationCountry;

    private String recipientName;
    private String recipientAddressLine1;
    private String recipientAddressLine2;
    private String recipientCity;
    private String recipientStateOrProvince;
    private String recipientPostalCode;

    private String remoteAreaCode;
    private String stateZone;
    private String pickupPointId;

    private String hsCode;
    private String incoterms;
    private double declaredValue;

    private double weightKg;
    private double lengthCm;
    private double widthCm;
    private double heightCm;

    private boolean dangerousGoods;
    private boolean isExpress;
    private boolean weekendPickup;

    private double baseRatePerKg;
    private double volumetricDivisor;
    private double ruralSurcharge;
    private double weekendSurcharge;

    private double vatRate;
    private double customsDutyRate;
    private double insuranceRate;

    private double currencyRateToBilling;

    private String trackingNumber;

    public Shipment(
            String id,
            String originCountry,
            String destinationCountry,
            double weightKg,
            double lengthCm,
            double widthCm,
            double heightCm) {
        this.id = id;
        this.originCountry = originCountry;
        this.destinationCountry = destinationCountry;
        this.weightKg = weightKg;
        this.lengthCm = lengthCm;
        this.widthCm = widthCm;
        this.heightCm = heightCm;
        this.baseRatePerKg = 6.75;
        this.volumetricDivisor = 5000.0;
        this.vatRate = 0.20;
        this.customsDutyRate = 0.08;
        this.insuranceRate = 0.012;
        this.ruralSurcharge = 12.0;
        this.weekendSurcharge = 15.0;
        this.currencyRateToBilling = 1.0;
    }

    public void setRecipient(String name, String line1, String line2, String city, String stateOrProvince, String postalCode) {
        this.recipientName = name;
        this.recipientAddressLine1 = line1;
        this.recipientAddressLine2 = line2;
        this.recipientCity = city;
        this.recipientStateOrProvince = stateOrProvince;
        this.recipientPostalCode = postalCode;
    }

    public void setOptions(boolean express, boolean weekendPickup, boolean dangerousGoods) {
        this.isExpress = express;
        this.weekendPickup = weekendPickup;
        this.dangerousGoods = dangerousGoods;
    }

    public void setDomesticRouting(String stateZone, String pickupPointId, String remoteAreaCode) {
        this.stateZone = stateZone;
        this.pickupPointId = pickupPointId;
        this.remoteAreaCode = remoteAreaCode;
    }

    public void setInternationalDetails(String hsCode, String incoterms, double declaredValue) {
        this.hsCode = hsCode;
        this.incoterms = incoterms;
        this.declaredValue = declaredValue;
    }

    public void setBilling(double baseRatePerKg, double vatRate, double customsDutyRate, double insuranceRate, double currencyRateToBilling) {
        this.baseRatePerKg = baseRatePerKg;
        this.vatRate = vatRate;
        this.customsDutyRate = customsDutyRate;
        this.insuranceRate = insuranceRate;
        this.currencyRateToBilling = currencyRateToBilling;
    }

    public void setDimensionalDivisor(double volumetricDivisor) {
        this.volumetricDivisor = volumetricDivisor;
    }

    public boolean validate() {
        if (recipientName == null || recipientName.isBlank()) return false;
        if (recipientAddressLine1 == null || recipientAddressLine1.isBlank()) return false;
        if (recipientCity == null || recipientCity.isBlank()) return false;
        if (recipientPostalCode == null || recipientPostalCode.isBlank()) return false;

        boolean international = !Objects.equals(originCountry, destinationCountry);

        if (international) {
            if (hsCode == null || hsCode.isBlank()) return false;
            if (incoterms == null || incoterms.isBlank()) return false;
            if (declaredValue <= 0) return false;
            if (recipientStateOrProvince == null || recipientStateOrProvince.isBlank()) return false;
        } else {
            if (stateZone == null || stateZone.isBlank()) return false;
            if (pickupPointId != null && pickupPointId.length() < 4) return false;
        }

        if (dangerousGoods) {
            if (international) {
                if (!"DAP".equals(incoterms) && !"DDP".equals(incoterms)) return false;
            } else {
                if (!"Z1".equals(stateZone) && !"Z2".equals(stateZone)) return false;
            }
        }

        if (isExpress && international && weightKg > 30) return false;

        return weightKg > 0 && lengthCm > 0 && widthCm > 0 && heightCm > 0;
    }

    public String generateLabel() {
        boolean international = !Objects.equals(originCountry, destinationCountry);
        String service = isExpress ? "EXP" : "STD";
        StringBuilder b = new StringBuilder();
        b.append("ID:").append(id).append("\n");
        b.append("FROM:").append(originCountry).append(" TO:").append(destinationCountry).append("\n");
        b.append("SERVICE:").append(service).append("\n");
        b.append("RECIPIENT:").append(recipientName).append("\n");
        b.append("ADDRESS:").append(recipientAddressLine1);
        if (recipientAddressLine2 != null && !recipientAddressLine2.isBlank()) {
            b.append(", ").append(recipientAddressLine2);
        }
        b.append(", ").append(recipientCity);
        if (recipientStateOrProvince != null) b.append(", ").append(recipientStateOrProvince);
        b.append(" ").append(recipientPostalCode).append("\n");

        if (international) {
            b.append("HS:").append(hsCode).append(" ").append("INCOTERMS:").append(incoterms).append("\n");
            b.append("DECLARED:").append(declaredValue).append("\n");
        } else {
            if (pickupPointId != null) b.append("PICKUP:").append(pickupPointId).append("\n");
            if (remoteAreaCode != null) b.append("REMOTE:").append(remoteAreaCode).append("\n");
            if (stateZone != null) b.append("ZONE:").append(stateZone).append("\n");
        }

        b.append("DG:").append(dangerousGoods ? "Y" : "N").append("\n");
        b.append("DIM:").append(lengthCm).append("x").append(widthCm).append("x").append(heightCm).append("cm\n");
        b.append("WT:").append(weightKg).append("kg\n");
        return b.toString();
    }

    public int estimateDeliveryDays(LocalDate shipDate) {
        boolean international = !Objects.equals(originCountry, destinationCountry);
        int days;
        if (international) {
            days = isExpress ? 3 : 7;
            if ("DDP".equals(incoterms)) days -= 1;
            if (dangerousGoods) days += 2;
        } else {
            days = isExpress ? 1 : 3;
            if (remoteAreaCode != null && !remoteAreaCode.isBlank()) days += 2;
            if ("Z3".equals(stateZone)) days += 1;
        }
        if (weekendPickup && (shipDate.getDayOfWeek() == DayOfWeek.SATURDAY || shipDate.getDayOfWeek() == DayOfWeek.SUNDAY)) {
            days += 1;
        }
        return Math.max(days, 1);
    }

    public String assignTrackingNumber() {
        boolean international = !Objects.equals(originCountry, destinationCountry);
        String prefix = international ? "INTL" : "DOM";
        String mode = isExpress ? "X" : "S";
        this.trackingNumber = prefix + "-" + mode + "-" + id + "-" + System.nanoTime();
        return trackingNumber;
    }

    public double calculateTotalCharge() {
        boolean international = !Objects.equals(originCountry, destinationCountry);

        double volumetricWeight = (lengthCm * widthCm * heightCm) / volumetricDivisor;
        double chargeableWeight = Math.max(weightKg, volumetricWeight);

        double transport = chargeableWeight * baseRatePerKg;
        if (isExpress) transport *= 1.35;

        double extras = 0.0;
        if (dangerousGoods) extras += 25.0;
        if (weekendPickup) extras += weekendSurcharge;
        if (!Objects.equals(originCountry, destinationCountry)) {
            transport *= 1.15;
        } else {
            if (remoteAreaCode != null && !remoteAreaCode.isBlank()) extras += ruralSurcharge;
        }

        double insurance = 0.0;
        if (international) {
            insurance = declaredValue * insuranceRate;
        }

        double duties = 0.0;
        if (international) {
            double dutiable = declaredValue;
            if ("DDP".equals(incoterms)) {
                duties = dutiable * customsDutyRate;
            }
        }

        double subtotal = transport + extras + insurance + duties;

        double vatBase = subtotal;
        if (international) {
            if ("DDP".equals(incoterms)) {
                vatBase += declaredValue;
            }
        }

        double vat = vatBase * vatRate;

        double totalLocal = subtotal + vat;

        double totalBilling = totalLocal * currencyRateToBilling;

        return Math.round(totalBilling * 100.0) / 100.0;
    }

    public String getTrackingNumber() {
        return trackingNumber;
    }

    public String getOriginCountry() {
        return originCountry;
    }

    public String getDestinationCountry() {
        return destinationCountry;
    }

    public double getBalanceChargeableWeight() {
        double volumetricWeight = (lengthCm * widthCm * heightCm) / volumetricDivisor;
        return Math.max(weightKg, volumetricWeight);
    }
}
